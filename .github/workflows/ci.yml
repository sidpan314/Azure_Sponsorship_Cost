name: Azure Sponsorship Costs Report

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  generate_and_send_report:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          clean: true

      - name: Build Docker Image
        run: docker build -t canalyzer:latest .

      - name: Echo Start
        run: |
         echo "Step 'Echo Start' executed"
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -w /app \
            -e CANALYYZER_SMTP_HOST="${{ secrets.CANALYYZER_SMTP_HOST }}" \
            -e CANALYYZER_SMTP_PORT="${{ secrets.CANALYYZER_SMTP_PORT }}" \
            -e CANALYYZER_SMTP_USER="${{ secrets.CANALYYZER_SMTP_USER }}" \
            -e CANALYYZER_SMTP_PASSWORD="${{ secrets.CANALYYZER_SMTP_PASSWORD }}" \
            -e CANALYYZER_SMTP_FROM="${{ secrets.CANALYYZER_SMTP_FROM }}" \
            -e CANALYYZER_SMTP_TO="${{ secrets.CANALYYZER_SMTP_TO }}" \
            -e CANALYYZER_TENANT_ID="${{ secrets.CANALYYZER_TENANT_ID }}" \
            -e CANALYYZER_CLIENT_ID="${{ secrets.CANALYYZER_CLIENT_ID }}" \
            -e CANALYYZER_CLIENT_SECRET="${{ secrets.CANALYYZER_CLIENT_SECRET }}" \
            -e CANALYYZER_SUBSCRIPTION_ID="${{ secrets.CANALYYZER_SUBSCRIPTION_ID }}" \
            canalyzer:latest \
            /bin/bash -c "\
            ls -la && \
              echo \"Starting Docker container\""

      - name: Run canalyzer
        run: |
          echo "Step 'Run canalyzer' executed"
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -w /app \
            -e CANALYYZER_SMTP_HOST="${{ secrets.CANALYYZER_SMTP_HOST }}" \
            -e CANALYYZER_SMTP_PORT="${{ secrets.CANALYYZER_SMTP_PORT }}" \
            -e CANALYYZER_SMTP_USER="${{ secrets.CANALYYZER_SMTP_USER }}" \
            -e CANALYYZER_SMTP_PASSWORD="${{ secrets.CANALYYZER_SMTP_PASSWORD }}" \
            -e CANALYYZER_SMTP_FROM="${{ secrets.CANALYYZER_SMTP_FROM }}" \
            -e CANALYYZER_SMTP_TO="${{ secrets.CANALYYZER_SMTP_TO }}" \
            -e CANALYYZER_TENANT_ID="${{ secrets.CANALYYZER_TENANT_ID }}" \
            -e CANALYYZER_CLIENT_ID="${{ secrets.CANALYYZER_CLIENT_ID }}" \
            -e CANALYYZER_CLIENT_SECRET="${{ secrets.CANALYYZER_CLIENT_SECRET }}" \
            -e CANALYYZER_SUBSCRIPTION_ID="${{ secrets.CANALYYZER_SUBSCRIPTION_ID }}" \
            canalyzer:latest \
            /bin/bash -c "\
              set -e && \
              echo 'Running canalyzer' && \
              echo 'CANALYYZER_CLIENT_ID: ' \$CANALYYZER_CLIENT_ID && \
              echo 'CANALYYZER_TENANT_ID: ' \$CANALYYZER_TENANT_ID && \
              echo 'CANALYYZER_SUBSCRIPTION_ID: ' \$CANALYYZER_SUBSCRIPTION_ID && \
              canalyzer -o report -f markdown && \
              ls -la"

      - name: Convert markdown to HTML
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -w /app \
            canalyzer:latest \
            /bin/bash -c "\
              set -e && \
              echo \"Converting markdown to HTML\" && \
              markdown_to_html report.md --css styles.css --with-summary --premailer -o html_report && \
              ls -la"
              
      - name: Convert HTML to PDF
        run: |
         echo "Step 'Convert HTML to PDF' executed"
         docker run --rm \
         -v ${{ github.workspace }}:/app \
         -w /app \
         canalyzer:latest \
         /bin/bash -c "\
         set -e && \
         ls -la && \
         echo 'Converting HTML to PDF' && \
         wkhtmltopdf html_report.html report.pdf
      
          
      - name: Run Python Script to Upload to Azure Blob Storage
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -w /app \
            -e STORAGE_ACCOUNT_KEY="${{ secrets.STORAGE_ACCOUNT_KEY }}" \
            -e STORAGE_ACCOUNT_NAME="${{ secrets.STORAGE_ACCOUNT_NAME }}" \
            -e CONNECTION_STRING="${{ secrets.CONNECTION_STRING }}" \
            -e CONTAINER_NAME="${{ secrets.CONTAINER_NAME }}" \
            -e FILE_PATH="/app/report.txt" \
            -e FILE_NAME="report.txt" \
            canalyzer:latest \
            /bin/bash -c "\
              set -e && \
              echo 'Running Python script' && \
              python /path-to-your-script/upload.py"

      - name: Get Azure Storage Blob URL
        id: get_blob_url
        run: |
          blob_url=$(az storage blob url \
            --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }} \
            --account-key ${{ secrets.STORAGE_ACCOUNT_KEY }} \
            --container-name ${{ secrets.CONTAINER_NAME }} \
            --name report.txt \
            --output tsv)
          echo "::set-output name=blob_url::$blob_url"

      - name: Send to Teams
        run: |
          blob_url="${{ steps.get_blob_url.outputs.blob_url }}"
          curl -H "Content-Type: application/json" -d "{\"text\": \"Report file: [Link]($blob_url)\"}" ${{ secrets.TEAM_HOOK }}
